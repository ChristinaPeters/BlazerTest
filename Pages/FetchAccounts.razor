@page "/fetchaccounts"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging;
@using System.Text.Json.Serialization;
@using System.Text.Json
@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory
@inject ILogger<FetchAccounts> logger;
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities


<AuthorizeView>
    @*Only show the list if the user is signed in and authorized*@
    <Authorized>
        <h3>Fetch Accounts</h3>

        @if (accounts != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Main Phone</th>
                        <th>City</th>
                        <th>Primary Contact</th>
                        <th>Email (Primary Contact)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Account account in accounts.value)
                    {
                        <tr id="@account.accountid">
                            <td>
                                @((account.name != null)
                                    ? account.name
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.telephone1 != null)
                                    ? account.telephone1
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.address1_city != null)
                                    ? account.address1_city
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.primarycontactid != null)
                                    ? (account.primarycontactid.fullname != null
                                    ? account.primarycontactid.fullname
                                    : string.Empty)
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.primarycontactid != null)
                                    ? (account.primarycontactid.emailaddress1 != null
                                    ? account.primarycontactid.emailaddress1
                                    : string.Empty)
                                    : string.Empty)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button @onclick="TriggerLogicAppOnButtonClick">Call Logic App</button>

            <button @onclick="GetAUth">Login with Azure AD</button>
            <iframe id="authFrame" style="display:none;"></iframe>
            


 
        }
        else
        {
            <p><em>@message</em></p>
        }
    </Authorized>
    <NotAuthorized>
        <h3>Authentication Failure!</h3>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>


@code {

    //The collection of Account records to display
    private AccountCollection accounts;

    //An informational message
    private string message = "Loading...";

    //Contains data about an error returned from the Web API
    private Error error;
    public Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessToken _token;

    // Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    // Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed.
    protected override async Task OnInitializedAsync()
    {

        // Tries to get an access token for the current user with the default set of permissions.
        var tokenResult = await TokenProvider.RequestAccessToken();

        // If the token request was successful
        if (tokenResult.TryGetToken(out var token))
        {

            _token = token ;

            //Creates an HttpClient based on the named definition found in Program.Main
            var client = ClientFactory.CreateClient("DataverseClient");

            //Prepare the request to get the data
            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"{client.BaseAddress}accounts?" +
                    "$select=name,telephone1,address1_city&" +
                    "$expand=primarycontactid($select=fullname,emailaddress1)")
                };
            request.Headers.Add("Access-Control-Allow-Origin", "*");
            request.Headers.Add("Access-Control-Allow-Headers", "Access-Control-Allow-Origin,Content-Type");
            //Add the access token
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", _token.Value);
            //Specify a JSON result is expected
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            //Limit the number of results to 10
            request.Headers.Add("Prefer", "odata.maxpagesize=10");
            request.Headers.Add("Access-Control-Allow-Origin", "*");
            request.Headers.Add("Access-Control-Allow-Headers", "Access-Control-Allow-Origin,Content-Type");


            //Send the request
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                //Parse the JSON returned into a strongly typed AccountCollection
                accounts = await response.Content.ReadFromJsonAsync<AccountCollection>();
            }
            else
            {
                //Parse the JSON returned into a strongly typed Error
                error = await response.Content.ReadFromJsonAsync<Error>();
                error.statuscode = (int)response.StatusCode;
                error.reason = response.ReasonPhrase;
                //Display a message to the user
                message = "An error occurred.";
                //Log the details so they can be seen in the browser console
                logger.LogError($"{error.detail.message}");

            }

        }
        else
        {
            // Notify user that the token request was not successful
            message = "There was a problem authenticating.";
        }

    }


    private async Task GetAUth()
    {
        var client = new HttpClient();

        var tenantId = "823abcf0-d47f-4968-a240-f3d8bc9cb9df";
        var clientId = "cd688eb0-90d6-42c5-92e8-5091efdc2d14";
        //var redirectUri = "https://global.consent.azure-apim.net/redirect";
        var redirectUri = "https://localhost:7276/auth-callback";
        //var client = new HttpClient();

        var authorizationUrl = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize?client_id={clientId}&response_type=code&redirect_uri={Uri.EscapeDataString(redirectUri)}&response_mode=query&scope=offline_access%20RecordsManagement.Read.All";

        var response = await client.GetAsync(authorizationUrl);

       // var authorizationUrl = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize?client_id={clientId}&response_type=code&redirect_uri={Uri.EscapeDataString(redirectUri)}&response_mode=query&scope=offline_access%20RecordsManagement.Read.All";

        //await JS.InvokeVoidAsync("open", authorizationUrl, "_self");
        Navigation.NavigateTo("/", forceLoad: true);

    }


    /// <summary>
    /// Handle redirect and getting the auth code ?????
    /// </summary>
    private void HandleRedirect()
    {
        // Capture the current URL
        var currentUrl = Navigation.Uri;

        // Check if the URL contains the 'code' parameter (the authorization code)
        if (currentUrl.Contains("code"))
        {
            // Extract the 'code' parameter value from the URL
            var uri = new Uri(currentUrl);
            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            if (queryParams.TryGetValue("code", out var code))
            {
                // Now you have the authorization code, you can exchange it for an access token
                var authorizationCode = code.ToString();
                // Use the authorization code for further token exchange...
                // Optionally, you can store the code or use it directly in your application.
                Console.WriteLine("codeeeeeeeeeeeeeeeeeeeeeeeee is", authorizationCode);

            }

        }

        // Optionally, navigate to the home page or take any other action
    }

    private async Task TriggerLogicAppOnButtonClick()
    {


        try
        {

            //if ((_token).Value == null)
            //{
                // Optionally handle the error if the token is not available
                //Console.WriteLine("Token not found. Please check authentication.");
               // return;
           //}
            var logicAppUrl = "https://prod-199.westeurope.logic.azure.com:443/workflows/f81e9d66e7a74f6ebee37adfaa073eb0/triggers/test/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Ftest%2Frun&sv=1.0&sig=ZGs_UiiXUm8mtY1TiYH3ITPRN6VWXh7yXUumnoawbBg";
            var client = new HttpClient();

            var response = await client.GetAsync(logicAppUrl);

           // var request = new HttpRequestMessage(HttpMethod.Post, logicAppUrl);
           // request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", _token.Value);

             //var client = new HttpClient();
            //var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                message = "Logic App triggered successfully!";
            }
            else
            {
                message = $"Failed to trigger Logic App. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }


    // The result will be a JSON object with an array of entities set to the value property
    public class AccountCollection
    {
        public Account[] value { get; set; }
    }

    //Just the properties of the Account EntityType used for this sample
    // See https://learn.microsoft.com/power-apps/developer/data-platform/webapi/reference/account
    public class Account
    {

        public Guid accountid { get; set; }

        public string name { get; set; }

        public string telephone1 { get; set; }

        public string address1_city { get; set; }

        public Contact primarycontactid { get; set; }


    }

    //Just the properties of the Contact EntityType that are expanded from the Account entity
    // See https://learn.microsoft.com/power-apps/developer/data-platform/webapi/reference/contact
    public class Contact
    {

        public string fullname { get; set; }

        public string emailaddress1 { get; set; }
    }

    // Contains the error data returned by the Web API and the HttpMessageResponse
    public class Error
    {
        [JsonPropertyName("error")]
        public ErrorDetail detail { get; set; }
        public int statuscode { get; set; }
        public string reason { get; set; }

    }

    //Contains data from the Web API
    //See https://learn.microsoft.com/powerapps/developer/data-platform/webapi/compose-http-requests-handle-errors#parse-errors-from-the-response
    public class ErrorDetail
    {
        public string code { get; set; }
        public string message { get; set; }

    }
}