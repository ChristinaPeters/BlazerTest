@page "/bewaartermijnenTelerikGrid"
@using Telerik.Blazor.Components.Grid;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging;
@using System.Text.Json.Serialization;
@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory
@inject ILogger<Bewaartermijnen> logger;
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthServicecs AuthServices

<AuthorizeView>

    <Authorized Context="authContext">
        <h3>Bewaartermijnen</h3>

        <TelerikGrid Data="@TermijnenData"
                     Pageable="true"
                     Sortable="true"
                     FilterMode="@GridFilterMode.FilterRow"
                     EditMode="@GridEditMode.Popup"
                     OnEdit="@EditHandler" OnUpdate="@UpdateHandler" OnCreate="@CreateHandler">
            <GridSettings>
                <GridPopupEditSettings MaxWidth="1500px" MaxHeight="900px" Class="custom-popup"></GridPopupEditSettings>
                <GridPopupEditFormSettings Orientation="@FormOrientation.Horizontal"
                                           ButtonsLayout="FormButtonsLayout.Center"
                                           Columns="3">
                </GridPopupEditFormSettings>
            </GridSettings>
            <GridToolBarTemplate>
                <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add</GridCommandButton>
            </GridToolBarTemplate>
            <GridColumns>
                <GridCommandColumn Context="gridCommandContext">
                    <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
                </GridCommandColumn>
                <GridColumn Field="@nameof(Bewaartermijn.cr971_cr4b0_inhoudstype)" Title="E-Content Bewaartermijn ID" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_cr4b0_site)" Title="Site" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_cr4b0_bibliotheek)" Title="Bibliotheek" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_cr4b0_inhoudstype)" Title="InhoudsType" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_econtenteventtypes)" Title="E-Content EventTypes" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_cr4b0_bewaartermijn)" Title="Bewaartermijn" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_contenttypeabbreviatio)" Title="ContentTypeAbbreviatio" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_sitenameabbreviation)" Title="SiteNameAbbreviation" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_librarynameabbreviation)" Title="LibraryNaSmeAbbreviation" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_reviewsettingstest)" Title="ReviewSettings" />
                <GridColumn Field="@nameof(Bewaartermijn.cr971_labelname)" Title="Label Name" />
            </GridColumns>
        </TelerikGrid>
    </Authorized>
    <NotAuthorized>
        <h3>Authentication Failure!</h3>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    //The collection of Account records to display
    private BewaartermijnCollection bewaartermijnen;

    private List<Bewaartermijn> TermijnenData;

    //An informational message
    private string message = "Loading...";

    //Contains data about an error returned from the Web API
    private Error error;
    public Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessToken _token;

    // Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    // Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed.
    protected override async Task OnInitializedAsync()
    {

        // Tries to get an access token for the current user with the default set of permissions.
        var tokenResult = await TokenProvider.RequestAccessToken();

        // If the token request was successful
        if (tokenResult.TryGetToken(out var token))
        {

            _token = token;

            //Creates an HttpClient based on the named definition found in Program.Main
            var client = ClientFactory.CreateClient("DataverseClient");

            //Prepare the request to get the data
            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"{client.BaseAddress}cr971_cr4b0_econtentbewaartermijnenses?" +
                                                                                                                                                                        "$select=cr971_cr4b0_site,cr971_cr4b0_bibliotheek,cr971_cr4b0_inhoudstype,cr971_cr4b0_bewaartermijn,cr971_contenttypeabbreviatio,cr971_sitenameabbreviation,cr971_librarynameabbreviation,cr971_reviewsettingstest,cr971_labelname")
                };
            request.Headers.Add("Access-Control-Allow-Origin", "*");
            request.Headers.Add("Access-Control-Allow-Headers", "Access-Control-Allow-Origin,Content-Type");
            //Add the access token
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", _token.Value);
            //Specify a JSON result is expected
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            //Limit the number of results to 10
            request.Headers.Add("Prefer", "odata.maxpagesize=10");
            request.Headers.Add("Access-Control-Allow-Origin", "*");
            request.Headers.Add("Access-Control-Allow-Headers", "Access-Control-Allow-Origin,Content-Type");


            //Send the request
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {

                //Parse the JSON returned into a strongly typed AccountCollection
                bewaartermijnen = await response.Content.ReadFromJsonAsync<BewaartermijnCollection>();
                TermijnenData = bewaartermijnen.value.ToList();
                //TODO: C: how to refactor this in a nice way?
            }
            else
            {
                //Parse the JSON returned into a strongly typed Error
                error = await response.Content.ReadFromJsonAsync<Error>();
                error.statuscode = (int)response.StatusCode;
                error.reason = response.ReasonPhrase;
                //Display a message to the user
                message = "An error occurred.";
                //Log the details so they can be seen in the browser console
                logger.LogError($"{error.detail.message}");

            }

        }
        else
        {
            // Notify user that the token request was not successful
            message = "There was a problem authenticating.";
        }

    }

    private async Task GetAUth()
    {

        var client = new HttpClient();

        var tenantId = "823abcf0-d47f-4968-a240-f3d8bc9cb9df";
        var clientId = "cd688eb0-90d6-42c5-92e8-5091efdc2d14";
        var redirectUri = "https://localhost:7276/auth-callback";

        var authorizationUrl = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize?client_id={clientId}&response_type=code&redirect_uri={Uri.EscapeDataString(redirectUri)}&response_mode=query&scope=offline_access%20RecordsManagement.Read.All";
        Navigation.NavigateTo(authorizationUrl, forceLoad: true);
    }

    private void EditHandler(GridCommandEventArgs args)
    {
        if (args.IsNew) // If it's a new entry, initialize a new object
        {
            args.Item = new Bewaartermijn();
        }
    }

    private async Task UpdateHandler(GridCommandEventArgs args)
    {
        if (args.Item is Bewaartermijn updatedItem)
        {
            try
            {
                // Find the original item to update in TermijnenData
                var originalItem = TermijnenData.FirstOrDefault(t =>
                    t.cr971_cr4b0_econtentbewaartermijnensid == updatedItem.cr971_cr4b0_econtentbewaartermijnensid); // Adjust based on unique identifier

                if (originalItem != null)
                {
                    // Update all fields of the original item
                    originalItem.cr971_cr4b0_bibliotheek = updatedItem.cr971_cr4b0_bibliotheek;
                    originalItem.cr971_cr4b0_site = updatedItem.cr971_cr4b0_site;
                    originalItem.cr971_cr4b0_inhoudstype = updatedItem.cr971_cr4b0_inhoudstype;
                    originalItem.cr971_econtenteventtypes = updatedItem.cr971_econtenteventtypes;
                    originalItem.cr971_cr4b0_bewaartermijn = updatedItem.cr971_cr4b0_bewaartermijn;
                    originalItem.cr971_contenttypeabbreviatio = updatedItem.cr971_contenttypeabbreviatio;
                    originalItem.cr971_sitenameabbreviation = updatedItem.cr971_sitenameabbreviation;
                    originalItem.cr971_librarynameabbreviation = updatedItem.cr971_librarynameabbreviation;
                    originalItem.cr971_reviewsettingstest = updatedItem.cr971_reviewsettingstest;
                    originalItem.cr971_labelname = updatedItem.cr971_labelname;
                }
                // Optional: Save updated data to the backend
                // var client = ClientFactory.CreateClient("DataverseClient");
                // client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _token.Value);

                // var response = await client.PutAsJsonAsync(
                //     $"{client.BaseAddress}cr971_cr4b0_econtentbewaartermijnenses({updatedItem.cr971_cr4b0_inhoudstype})",
                //     updatedItem); // Assuming `Id` is the unique identifier for the resource

                // if (response.IsSuccessStatusCode)
                // {
                //     logger.LogInformation("Update successful");
                // }
                // else
                // {
                //     logger.LogError($"Failed to update: {response.StatusCode}");
                // }
            }
            catch (Exception ex)
            {
                logger.LogError($"Error updating item: {ex.Message}");
            }
        }
    }
    private async Task CreateHandler(GridCommandEventArgs args)
    {
        if (args.Item is Bewaartermijn newItem)
        {
            // Generate a unique ID for the new item
            newItem.cr971_cr4b0_econtentbewaartermijnensid = Guid.NewGuid();

            // Add the new item to the data source
            TermijnenData.Add(newItem);

            await InvokeAsync(StateHasChanged);

            await JS.InvokeVoidAsync("alert", "New row added successfully!");

            // Optionally refresh the grid (if required)
            await Task.Delay(10); 
        }
    }




    // private async Task TriggerLogicAppOnButtonClick()
    // {

    //     try
    //     {
    //         var authorizationCode = AuthServices.AuthorizationCode;



    //         var data = new { AuthorizationCode = authorizationCode, bewaartermijnen = bewaartermijnen };


    //         string jsonData = System.Text.Json.JsonSerializer.Serialize(data);

    //         // Create the HTTP content
    //         var content = new StringContent(jsonData, System.Text.Encoding.UTF8, "application/json");
    //         Console.WriteLine(jsonData);
    //         var logicAppUrl = "https://prod-199.westeurope.logic.azure.com:443/workflows/f81e9d66e7a74f6ebee37adfaa073eb0/triggers/test/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Ftest%2Frun&sv=1.0&sig=ZGs_UiiXUm8mtY1TiYH3ITPRN6VWXh7yXUumnoawbBg";
    //         var client = new HttpClient();


    //         var response = await client.PostAsync(logicAppUrl, content);

    //         if (response.IsSuccessStatusCode)
    //         {
    //             message = "Logic App triggered successfully!";
    //         }
    //         else
    //         {
    //             message = $"Failed to trigger Logic App. Status code: {response.StatusCode}";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         message = $"Error: {ex.Message}";
    //     }
    }

