@page "/bewaartermijnen"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging;
@using System.Text.Json.Serialization;
@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory
@inject ILogger<Bewaartermijnen> logger;
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthServicecs AuthServices

<AuthorizeView>
    @*Only show the list if the user is signed in and authorized*@
    <Authorized>
        <h3>E-Content Bewaartermijnen</h3>

        @if (bewaartermijnen != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Bewerk een bewaartermijn</th>
                        <th>E-Content Bewaartermijn ID</th>
                        <th>Site</th>
                        <th>Bibiotheek</th>
                        <th>InhoudsType</th>
                        <th>E-Content EventTypes</th>
                        <th>Bewaartermijn</th>
                        <th>ContentTypeAbbreviation</th>
                        <th>SiteNameAbbreviation</th>
                        <th>LibaryNameAbbreviation</th>
                        <th>ReviewSetting</th>
                        <th>Label name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Bewaartermijn bewaartermijn in bewaartermijnen.value)
                    {
                        <tr id="@bewaartermijn.cr971_cr4b0_econtentbewaartermijnensid">
                            <td>
                                <a type="button" class="btn btn-primary" href="/bewaartermijnen/@bewaartermijn.cr971_cr4b0_econtentbewaartermijnensid">Edit</a>
                            </td>
                            <td>
                                @((bewaartermijn.cr971_cr4b0_econtentbewaartermijnensid != null)
                                    ? bewaartermijn.cr971_cr4b0_econtentbewaartermijnensid
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_cr4b0_site != null)
                                    ? bewaartermijn.cr971_cr4b0_site
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_cr4b0_bibliotheek != null)
                                    ? bewaartermijn.cr971_cr4b0_bibliotheek
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_cr4b0_inhoudstype != null)
                                    ? bewaartermijn.cr971_cr4b0_inhoudstype
                                    : string.Empty)
                            </td>

                            <td>
                                <select class="form-control" name="siteDropdown">
                                    <option value="Site1">Einde-hov</option>
                                    <option value="Site2">Einde-expl-dat</option>
                                </select>

                            </td>



                            <td>
                                @((bewaartermijn.cr971_cr4b0_bewaartermijn != null)
                                    ? bewaartermijn.cr971_cr4b0_bewaartermijn
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_contenttypeabbreviatio != null)
                                    ? bewaartermijn.cr971_contenttypeabbreviatio
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_sitenameabbreviation != null)
                                    ? bewaartermijn.cr971_sitenameabbreviation
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_librarynameabbreviation != null)
                                    ? bewaartermijn.cr971_librarynameabbreviation
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_reviewsettingstest != null)
                                    ? bewaartermijn.cr971_reviewsettingstest
                                    : string.Empty)
                            </td>
                            <td>
                                @((bewaartermijn.cr971_labelname != null)
                                    ? bewaartermijn.cr971_labelname
                                    : string.Empty)
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
            <button type="button" class="btn btn-primary" @onclick="TriggerLogicAppOnButtonClick">Call Logic App</button>
            <button type="button" class="btn btn-primary" @onclick="GetAUth">Login with Azure AD</button>



        }
        else
        {
            <p><em>@message</em></p>
        }
    </Authorized>
    <NotAuthorized>
        <h3>Authentication Failure!</h3>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    //The collection of Account records to display
    private BewaartermijnCollection bewaartermijnen;

    //An informational message
    private string message = "Loading...";

    //Contains data about an error returned from the Web API
    private Error error;
    public Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessToken _token;

    // Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    // Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed.
    protected override async Task OnInitializedAsync()
    {

        // Tries to get an access token for the current user with the default set of permissions.
        var tokenResult = await TokenProvider.RequestAccessToken();

        // If the token request was successful
        if (tokenResult.TryGetToken(out var token))
        {

            _token = token;

            //Creates an HttpClient based on the named definition found in Program.Main
            var client = ClientFactory.CreateClient("DataverseClient");

            //Prepare the request to get the data
            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"{client.BaseAddress}cr971_cr4b0_econtentbewaartermijnenses?" +
                                                                                    "$select=cr971_cr4b0_site,cr971_cr4b0_bibliotheek,cr971_cr4b0_inhoudstype,cr971_cr4b0_bewaartermijn,cr971_contenttypeabbreviatio,cr971_sitenameabbreviation,cr971_librarynameabbreviation,cr971_reviewsettingstest,cr971_labelname")
                };
            request.Headers.Add("Access-Control-Allow-Origin", "*");
            request.Headers.Add("Access-Control-Allow-Headers", "Access-Control-Allow-Origin,Content-Type");
            //Add the access token
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", _token.Value);
            //Specify a JSON result is expected
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            //Limit the number of results to 10
            request.Headers.Add("Prefer", "odata.maxpagesize=10");
            request.Headers.Add("Access-Control-Allow-Origin", "*");
            request.Headers.Add("Access-Control-Allow-Headers", "Access-Control-Allow-Origin,Content-Type");


            //Send the request
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {

                //Parse the JSON returned into a strongly typed AccountCollection
                bewaartermijnen = await response.Content.ReadFromJsonAsync<BewaartermijnCollection>();
            }
            else
            {
                //Parse the JSON returned into a strongly typed Error
                error = await response.Content.ReadFromJsonAsync<Error>();
                error.statuscode = (int)response.StatusCode;
                error.reason = response.ReasonPhrase;
                //Display a message to the user
                message = "An error occurred.";
                //Log the details so they can be seen in the browser console
                logger.LogError($"{error.detail.message}");

            }

        }
        else
        {
            // Notify user that the token request was not successful
            message = "There was a problem authenticating.";
        }

    }

    private async Task GetAUth()
    {

        var client = new HttpClient();

        var tenantId = "823abcf0-d47f-4968-a240-f3d8bc9cb9df";
        var clientId = "cd688eb0-90d6-42c5-92e8-5091efdc2d14";
        var redirectUri = "https://localhost:7276/auth-callback";

        var authorizationUrl = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize?client_id={clientId}&response_type=code&redirect_uri={Uri.EscapeDataString(redirectUri)}&response_mode=query&scope=offline_access%20RecordsManagement.Read.All";
        Navigation.NavigateTo(authorizationUrl, forceLoad: true);
    }


    private async Task TriggerLogicAppOnButtonClick()
    {

        try
        {
            var authorizationCode = AuthServices.AuthorizationCode;



            var data = new { AuthorizationCode = authorizationCode, bewaartermijnen = bewaartermijnen };


            string jsonData = System.Text.Json.JsonSerializer.Serialize(data);

            // Create the HTTP content
            var content = new StringContent(jsonData, System.Text.Encoding.UTF8, "application/json");
            Console.WriteLine(jsonData);
            var logicAppUrl = "https://prod-199.westeurope.logic.azure.com:443/workflows/f81e9d66e7a74f6ebee37adfaa073eb0/triggers/test/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Ftest%2Frun&sv=1.0&sig=ZGs_UiiXUm8mtY1TiYH3ITPRN6VWXh7yXUumnoawbBg";
            var client = new HttpClient();


            var response = await client.PostAsync(logicAppUrl, content);

            if (response.IsSuccessStatusCode)
            {
                message = "Logic App triggered successfully!";
            }
            else
            {
                message = $"Failed to trigger Logic App. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }
}